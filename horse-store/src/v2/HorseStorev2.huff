
/* Interfaces */
#define function mintHorse() nonpayable returns() //c even if the function returns nothing, you srill need to specify this in the interface
#define function feedHorse(uint256) nonpayable returns()
#define function isHappyHorse(uint256) view returns (bool)

#define constant FREE_STORAGE_POINTER_SLOT     = FREE_STORAGE_POINTER()
#define constant NFT_NAME                      = 0x486f72736553746f7265
#define constant NFT_SYMBOL                    = 0x4853
#define constant HORSE_HAPPY_IF_FED_WITHIN     = 0x15180

#define macro CONSTRUCTOR() = takes(0) returns (0) {
  [NFT_NAME] //[NFT_NAME]
  [FREE_STORAGE_POINTER_SLOT] //[0, NFT_NAME]
  sstore  //[]

  [NFT_SYMBOL] //[NFT_SYMBOL]
  [FREE_STORAGE_POINTER_SLOT]  //[0, NFT_SYMBOL]
  0x01 //[1,0, NFT_SYMBOL]
  add //[1, NFT_SYMBOL]     
  sstore //[]
}

#define macro MAIN() = takes(0) returns (0) {
  0x00     // [0]
  calldataload  //[calldatafirst32bytes]
  0xe0          //[224,calldatafirst32bytes]
  shr           //[function selector from calldata]

  //c function dispatcher setup
  //Idea is that if the function selector from the calldata matches one of the function selectors from the HorseStore contract, then we want to go to that location in the contract and execute that function.
  dup1          //[function selector from calldata, function selector from calldata]
 __FUNC_SIG(mintHorse)   //[0x61fc6a67, function selector from calldata, function selector from calldata]
  eq           //[if selectors match then 1 but if not 0, function selector from calldata]

  mintJump   //[getsprogramcounterfromdefinedmacro, if selectors match then 1 but if not 0, function selector from calldata]
  jumpi        //[function selector from calldata]

 dup1    //[function selector from calldata, function selector from calldata]
 __FUNC_SIG(feedHorse)   //[0xc65e2eaa, function selector from calldata, function selector from calldata]
  eq          //[ if selectors match then 1 but if not 0, function selector from calldata]
  feedJump    //[getsprogramcounterfromdefinedmacro, if selectors match then 1 but if not 0, function selector from calldata]
  jumpi       //[function selector from calldata]

 __FUNC_SIG(isHappyHorse)   //[0x62134726, function selector from calldata]
  eq          //[ if selectors match then 1 but if not 0]
  happyHorseJump    //[getsprogramcounterfromdefinedmacro, if selectors match then 1 but if not 0]
  jumpi       //[]



  0x00        //[0]
  0x00        //[0,0]
  revert      //[]

  mintJump:
  _MINTHORSE()
  feedJump:
  _FEEDHORSE()
  happyHorseJump:
  _ISHAPPYHORSE()
}

#define macro _MINTHORSE() = takes (0) returns (0){
//c this macro is returning the arguments needed to be passed to the SAFE_MINT macro which is why returns is 2. see huff docs where it says These designate the amount of stack inputs the macro/function takes in as well as the amount of stack elements the macro/function outputs. The takes and returns keywords are optional - if they are not present, the value will default to 0.

0x08 //[0x08]
sload //[0]
caller //[msg.sender,0] 
//c the above 3 opcodes get the total supply for us as the safemint function takes 2 arguments, the msg.sender and the total supply which we now have on the stack so we cn call safemint now. total supply is at slot 8 of our contract and the storage slot stores the length of the array so getting the value of that slot gives us what we need.
safemintJump //[getspcforsafemintmacro, msg.sender, 0]
jump  //[msg.sender, 0]

   safemintJump:
   SAFE_MINT()
}

//c here is the plan. in the main macro, we are going to have to split it into many macros for example, if func selector matches mintHorse, dontt jump straight to mintHorse, jump to a total supply macro which when it is done, jumps back to another macro called mint continue which continues the mintHorse functions and you keep jumping like that in each macro till the work is done 



#define macro SAFE_MINT() = takes (0) returns (0){
//c since it takes 2, it is taking 2 arguments from the stack which from _MINTHORSE, are msg.sender and 0 which are what we need and the _MINTHORSE macro returns.
// Input Stack: [msg.sender, 0]
0x //[0x,msg.sender, 0]
swap2 //[0,msg.sender, 0x]
_safeMintJump
jump

_safeMintJump:
_SAFEMINT()

}

#define macro _SAFEMINT() = takes(0) returns(0){
 // Input Stack: [0,msg.sender, 0x]
 swap1 //[msg.sender,0,0x]
 mintJump
 jump

 mintJump:
 MINT()
}

#define macro MINT() = takes(0) returns(0){
  // Input Stack: [msg.sender, 0, 0x]
  0x0000000000000000000000000000000000000000 //[0x0000000000000000000000000000000000000000, msg.sender, 0 , 0x]
  eq //[1 if msg.sender is zero addy and 0 otherwise, 0, 0x]
  revertJump //[revertJumpPC, 1 if msg.sender is zero addy and 0 otherwise, 0, 0x]
  jumpi //[0,0x]
  caller //[msg.sender, 0,0x]
  0x0000000000000000000000000000000000000000 //[0x0000000000000000000000000000000000000000, msg.sender, 0 , 0x]
  swap3 //[0x,0x0000000000000000000000000000000000000000, msg.sender, 0]
  pop //[0x0000000000000000000000000000000000000000, msg.sender, 0]
  updateJump //[updateJumpPC,0x0000000000000000000000000000000000000000, msg.sender, 0]
  jump

revertJump:
REVERT()
updateJump:
UPDATESTEP1()
}

#define macro REVERT() = takes(0) returns(0){
0x64a0ae9200000000000000000000000000000000000000000000000000000000 //[ERC721InvalidReceiver(address) selector, 0, 0x]
0x20 //[0x20,ERC721InvalidReceiver(address) selector, 0, 0x]
mstore //[0,0x]
0x0000000000000000000000000000000000000000000000000000000000000000 //[0, 0, 0x]
0x24 //[0x24, 0, 0, 0x]
mstore //[0,0x]
0x24 //[0x24, 0, 0x]
0x20 //[0x20, 0x24, 0, 0x]
revert
}



#define macro UPDATESTEP1() = takes(0) returns (0){
//Input Stack: [0x0000000000000000000000000000000000000000, msg.sender, 0]
dup3 //[0,0x0000000000000000000000000000000000000000, msg.sender, 0]
0x00 //[0,0,0x0000000000000000000000000000000000000000, msg.sender, 0]
mstore //[0x0000000000000000000000000000000000000000, msg.sender, 0]
0x02 //[0x02, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x20 //[32,0x02,0x0000000000000000000000000000000000000000, msg.sender, 0]
mstore //[0x0000000000000000000000000000000000000000, msg.sender, 0]
0x40 //[64,0x0000000000000000000000000000000000000000, msg.sender, 0]
0x00 //[0,64,0x0000000000000000000000000000000000000000, msg.sender, 0]
sha3   //[storage slot for _owners[tokenId], 0x0000000000000000000000000000000000000000, msg.sender, 0]
sload //[owner of token id address,0x0000000000000000000000000000000000000000, msg.sender, 0]
dup1 //[owner of token id address,owner of token id address,0x0000000000000000000000000000000000000000, msg.sender, 0]
0x80 //[128,owner of token id address,owner of token id address,0x0000000000000000000000000000000000000000, msg.sender, 0]
mstore //[owner of token id address,0x0000000000000000000000000000000000000000, msg.sender, 0]
dup2 //[0x0000000000000000000000000000000000000000, owner of token id address,0x0000000000000000000000000000000000000000, msg.sender, 0]
0x0000000000000000000000000000000000000000//[0x0000000000000000000000000000000000000000, 0x0000000000000000000000000000000000000000, owner of token id address,0x0000000000000000000000000000000000000000, msg.sender, 0]
eq //[1,owner of token id address,0x0000000000000000000000000000000000000000, msg.sender, 0]
iszero //[0, owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
 updateJump2 //[updateJump2PC, 0, owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
 jumpi //[owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
 continueUpdateJump //[continueUpdateJumpPC, owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
 jump //[owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]


 updateJump2:
 UPDATESTEP2()
 continueUpdateJump:
 CONTINUE_UPDATE()

}

#define macro UPDATESTEP2() = takes(0) returns (0){
  //Input Stack: [owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  dup1 //[owner of token id address, owner of token id address,0x0000000000000000000000000000000000000000, msg.sender, 0]
  dup3 //[0x0000000000000000000000000000000000000000,owner of token id address, owner of token id address,0x0000000000000000000000000000000000000000, msg.sender, 0]
  eq //[1,owner of token id address,0x0000000000000000000000000000000000000000, msg.sender, 0]
  dup2 //[owner of token id address,1,owner of token id address,0x0000000000000000000000000000000000000000, msg.sender, 0]
  0x00 //[0,owner of token id address,1,owner of token id address,0x0000000000000000000000000000000000000000, msg.sender, 0]
  mstore //[1,owner of token id address,0x0000000000000000000000000000000000000000, msg.sender, 0]
  0x05 //[5 (_operatorApprovals storage slot), 1,owner of token id address,0x0000000000000000000000000000000000000000, msg.sender, 0]
  0x20 //[32,5 (_operatorApprovals storage slot), 1,owner of token id address,0x0000000000000000000000000000000000000000, msg.sender, 0]
  mstore //[1,owner of token id address,0x0000000000000000000000000000000000000000, msg.sender, 0]
  0x40 //[64,1,owner of token id address,0x0000000000000000000000000000000000000000, msg.sender, 0]
  0x00 //[0,64,1,owner of token id address,0x0000000000000000000000000000000000000000, msg.sender, 0]
  sha3 //[storage slot for _operatorApprovals[owner] ,1,owner of token id address,0x0000000000000000000000000000000000000000, msg.sender, 0]
  dup4 //[0x0000000000000000000000000000000000000000,storage slot for _operatorApprovals[owner] ,1,owner of token id address,0x0000000000000000000000000000000000000000, msg.sender, 0]
  0x00 //[0,0x0000000000000000000000000000000000000000,storage slot for _operatorApprovals[owner] ,1,owner of token id address,0x0000000000000000000000000000000000000000, msg.sender, 0]
  mstore //[storage slot for _operatorApprovals[owner] ,1,owner of token id address,0x0000000000000000000000000000000000000000, msg.sender, 0]
  0x20 //[32,storage slot for _operatorApprovals[owner] ,1,owner of token id address,0x0000000000000000000000000000000000000000, msg.sender, 0]
  mstore //[1,owner of token id address,0x0000000000000000000000000000000000000000, msg.sender, 0]
  0x40 //[64,1,owner of token id address,0x0000000000000000000000000000000000000000, msg.sender, 0]
  0x00 //[0,64,1,owner of token id address,0x0000000000000000000000000000000000000000, msg.sender, 0]
  sha3 //[storage slot for _operatorApprovals[owner][operator],1,owner of token id address,0x0000000000000000000000000000000000000000, msg.sender, 0]
  sload //[whatever was in that slot(could be 0 or 1),1,owner of token id address,0x0000000000000000000000000000000000000000, msg.sender, 0]
  or //[1,owner of token id address,0x0000000000000000000000000000000000000000, msg.sender, 0]
  dup5 //[0, 1,owner of token id address,0x0000000000000000000000000000000000000000, msg.sender, 0]
  0x00 //[0, 0, 1,owner of token id address,0x0000000000000000000000000000000000000000, msg.sender, 0]
  mstore //[1,owner of token id address,0x0000000000000000000000000000000000000000, msg.sender, 0]
  0x04 //[0x04,1,owner of token id address,0x0000000000000000000000000000000000000000, msg.sender, 0]
  0x20 //[32,0x04,1,owner of token id address,0x0000000000000000000000000000000000000000, msg.sender, 0]
  mstore  //[1,owner of token id address,0x0000000000000000000000000000000000000000, msg.sender, 0]
  0x40  //[64,1,owner of token id address,0x0000000000000000000000000000000000000000, msg.sender, 0]
  0x00 //[0,64,1,owner of token id address,0x0000000000000000000000000000000000000000, msg.sender, 0]
  sha3 //[storage slot for _tokenApprovals[tokenId],1,owner of token id address,0x0000000000000000000000000000000000000000, msg.sender, 0]
  sload //[whatever address is in _tokenApprovals[tokenId],1,owner of token id address,0x0000000000000000000000000000000000000000, msg.sender, 0]
  dup4 //[0x0000000000000000000000000000000000000000,whatever address is in _tokenApprovals[tokenId],1,owner of token id address,0x0000000000000000000000000000000000000000, msg.sender, 0]
  eq //[could be 0 or 1, 1, owner of token id address,0x0000000000000000000000000000000000000000, msg.sender, 0]
  or //[1, owner of token id address,0x0000000000000000000000000000000000000000, msg.sender, 0]
  0x0000000000000000000000000000000000000000 //[0x0000000000000000000000000000000000000000,1, owner of token id address,0x0000000000000000000000000000000000000000, msg.sender, 0]
  dup4 //[0x0000000000000000000000000000000000000000,0x0000000000000000000000000000000000000000,1, owner of token id address,0x0000000000000000000000000000000000000000, msg.sender, 0]
  eq //[1,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  iszero //[0,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  and //[0,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  iszero //[1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
 revertJump //[revertJumpPC, 1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
 jumpi //[owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
 continueUpdateJump //[continueUpdateJumpPC, owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
 jump


 revertJump:
 REVERT_MESSAGES()
 continueUpdateJump:
 CONTINUE_UPDATE()

}

#define macro REVERT_MESSAGES() = takes(0) returns (0){
  //Input Stack: [owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  dup2 //[0x0000000000000000000000000000000000000000, owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  dup2 //[owner of token id address,0x0000000000000000000000000000000000000000, owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  eq //[1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  revertNonExistentJump //[revertNonExistentJumpPC, 1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  jumpi //[owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
 0x177e802f //[0x177e802f,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0] 
 0x00 //[0,0x177e802f,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
 mstore //[owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
 0x00  //[0,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
 dup3 //[0x0000000000000000000000000000000000000000,0, owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
 swap1 //[0,0x0000000000000000000000000000000000000000,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
 0x04  //[4,0,0x0000000000000000000000000000000000000000,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
 dup1 //[4,4,0,0x0000000000000000000000000000000000000000,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
 swap2 //[0,4,4,0x0000000000000000000000000000000000000000,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
 add //[4,4,0x0000000000000000000000000000000000000000,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
 swap2 //[0x0000000000000000000000000000000000000000,4,4,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
 swap1 //[4,0x0000000000000000000000000000000000000000,4, owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
 mstore //[4,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
 0x20 //[32,4,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
 add //[36,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
 dup1 //[36,36,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
 0x00 //[0,36,36,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
 swap1 //[36,0,36,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
 mstore //[36,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
 0x20 //[32,36,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
 add //[68,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
 0x00 //[0,68,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
 revert

  revertNonExistentJump:
  REVERTNONEXISTENT()
}

#define macro REVERTNONEXISTENT() = takes(0) returns(0){

 0x9a0d5eba //[0x9a0d5eba,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0] 
 0x00 //[0,0x9a0d5eba,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
 dup1 //[0,0,0x9a0d5eba,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
 swap2 //[0x9a0d5eba,0,0,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
 swap1 //[0,0x9a0d5eba,0,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
 mstore //[0,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0] 
 0x04 //[4,0,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
 add //[4,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
 dup1 //[4,4,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
 dup6 //[0,4,4,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
 swap1 //[4,0,4,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
 mstore //[4,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
 0x20 //[32,4,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
 add //[36,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
 0x00 //[0,36,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
 revert
}


#define macro CONTINUE_UPDATE() = takes(0) returns(0){
  //Input Stack : [owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  0x0000000000000000000000000000000000000000 //[0x0000000000000000000000000000000000000000, owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  0x80 //[128,0x0000000000000000000000000000000000000000, owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  mload //[owner of token id address,0x0000000000000000000000000000000000000000, owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  eq //[1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  iszero //[0,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  approveJump //[approveJumpPC,0,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  jumpi //[owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  toAddressCheckJump //[toAddressCheckJumpPC,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  jump //[owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]

  toAddressCheckJump:
  TO_ADDRESS_CHECK()
  approveJump:
  APPROVESTEP1()
}


#define macro APPROVESTEP1() = takes(0) returns(0){

  0x01 //[1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  0x0000000000000000000000000000000000000000 //[0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  dup6 //[0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  dup2 //[0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  dup4 //[1,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  dup4 //[0x0000000000000000000000000000000000000000,1,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  0x0000000000000000000000000000000000000000 //[0x0000000000000000000000000000000000000000,0x0000000000000000000000000000000000000000,1,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  eq //[1,1,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  iszero //[0,1,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  or //[1,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  ownerMemJump //[ownerMemJumpPC,1,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  jumpi //[0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  approveStep2Jump //[approveStep2JumpPC,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  jump //[0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]


  ownerMemJump:
  OWNER_MEMORY()
  approveStep2Jump:
  APPROVESTEP2()
}


#define macro OWNER_MEMORY() = takes(0) returns(0){
dup2 //[0,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  0x00 //[0,0,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  mstore //[0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  0x02 //[0x02, 0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  0x20 //[32,0x02,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  mstore //[0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  0x40 //[64,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  0x00 //[0,64,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  sha3 //[storage slot for _owners[tokenId], 0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  sload //[owner of token id address,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  dup1 //[owner of token id address,owner of token id address,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
swap2 //[0x0000000000000000000000000000000000000000,owner of token id address,owner of token id address,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
eq //[0 or 1, owner of token id address,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
revertNonExistentJump //[revertNonExistentJumpPC, 0 or 1, owner of token id address,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
jumpi //[owner of token id address,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
approveStep2Jump //[approveStep2JumpPC,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
jump //[0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]

approveStep2Jump:
APPROVESTEP2()
revertNonExistentJump:
  REVERTNONEXISTENT()
}


#define macro APPROVESTEP2() = takes(0) returns(0){

dup3 //[0x0000000000000000000000000000000000000000,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x0000000000000000000000000000000000000000 //[0x0000000000000000000000000000000000000000,0x0000000000000000000000000000000000000000,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
eq //[0 or 1, 0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
iszero //[0 or 1, 0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
dup2 //[0x0000000000000000000000000000000000000000, 0 or 1, 0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
dup5 //[0x0000000000000000000000000000000000000000,0x0000000000000000000000000000000000000000, 0 or 1, 0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
eq //[0 or 1, 0 or 1,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x00 //[0,0 or 1, 0 or 1,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
dup1 //[0,0,0 or 1, 0 or 1,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
mstore //[0 or 1, 0 or 1,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x05 //[5 (_operatorApprovals storage slot), 0 or 1, 0 or 1,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x20 //[32,5 (_operatorApprovals storage slot), 0 or 1, 0 or 1,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
mstore //[0 or 1, 0 or 1,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x40 //[64,0 or 1, 0 or 1,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x00 //[0,64,0 or 1, 0 or 1,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
sha3 //[storage slot for _operatorApprovals[owner] ,0 or 1, 0 or 1,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
dup4 //[0x0000000000000000000000000000000000000000,storage slot for _operatorApprovals[owner] ,0 or 1, 0 or 1,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x00 //[0,0x0000000000000000000000000000000000000000,storage slot for _operatorApprovals[owner] ,0 or 1, 0 or 1,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
mstore //[storage slot for _operatorApprovals[owner] ,0 or 1, 0 or 1,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x20 //[32,storage slot for _operatorApprovals[owner] ,0 or 1, 0 or 1,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
mstore //[0 or 1, 0 or 1,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x40 //[64,0 or 1, 0 or 1,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x00 //[0,64,0 or 1, 0 or 1,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
sha3 //[storage slot for _operatorApprovals[owner][operator],0 or 1, 0 or 1,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
sload //[whatever was in that slot(could be 0 or 1),0 or 1, 0 or 1,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
dup1 //[whatever was in that slot(could be 0 or 1),whatever was in that slot(could be 0 or 1),0 or 1, 0 or 1,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x80 //[128, whatever was in that slot(could be 0 or 1),whatever was in that slot(could be 0 or 1),0 or 1, 0 or 1,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x20 //[32,128, whatever was in that slot(could be 0 or 1),whatever was in that slot(could be 0 or 1),0 or 1, 0 or 1,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
add //[160,whatever was in that slot(could be 0 or 1),whatever was in that slot(could be 0 or 1),0 or 1, 0 or 1,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
mstore //[whatever was in that slot(could be 0 or 1),0 or 1, 0 or 1,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
and //[0 or 1, 0 or 1,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
and //[0 or 1,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
revertInvalidApproverJump //[revertInvalidApproverJumpPC, 0 or 1,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
jumpi //[0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
dup4 //[1,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x01 //[1,1,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
eq //[1,,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
emitApprovalJump //[emitApprovalJumpPC, 1,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
jumpi //[0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
endOfApproveJump //[endOfApproveJumpPC,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
jump //[0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]

endOfApproveJump:
END_OF_APPROVE()
revertInvalidApproverJump:
REVERT_INVALID_APPROVER()
emitApprovalJump:
EMIT_APPROVAL()

}


#define macro REVERT_INVALID_APPROVER() = takes(0) returns(0){
  //Input stack: [0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  0xa9fbf51f //[ERC721InvalidApprover(address) selector, 0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  0xa0 //[160,ERC721InvalidApprover(address) selector, 0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  0x20 //[32,160,ERC721InvalidApprover(address) selector, 0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  add //[192,ERC721InvalidApprover(address) selector, 0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  mstore //[0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  dup3 //[0x0000000000000000000000000000000000000000,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  0xc0 //[192,0x0000000000000000000000000000000000000000,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  0x04 //[4,192,0x0000000000000000000000000000000000000000,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  add //[196,0x0000000000000000000000000000000000000000,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  mstore //[0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  0x24 //[36,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  0xc0 //[192.36,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  revert //[0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]

}



#define macro EMIT_APPROVAL() = takes(0) returns(0){

//Input Stack: //[0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
dup2 //[0,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
dup2 //[0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x80 //[128,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
mload //[owner of token id, 0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925 //[hash of approval event,owner of token id, 0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x00 //[0,hash of approval event,owner of token id, 0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0xc0 //[192,0,hash of approval event,owner of token id, 0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
log4 //[0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
endOfApproveJump //[endOfApproveJumpPC,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
jump //[0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]

endOfApproveJump:
END_OF_APPROVE()
}


#define macro END_OF_APPROVE() = takes(0) returns(0){
//Input Stack: [0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x00 //[0,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
dup1 //[0, 0, 0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
mstore //[0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x04 //[0x04,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x20 //[32,0x04,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
mstore  //[0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x40  //[64,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x00 //[0,64,0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
sha3 //[storage slot for _tokenApprovals[tokenId],0x0000000000000000000000000000000000000000,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
sload //[0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
continueUpdateJump //[ContinueUpdateJumpPC, 0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
jump

continueUpdateJump:
CONTINUE_UPDATE_STEP()
}

#define macro CONTINUE_UPDATE_STEP() = takes(0) returns(0){
//Input Stack: [0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x80 //[128,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
mload //[owner of token id address,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x00//[0,owner of token id address,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
mstore //[0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x03 //[3,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x20 //[32,3,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
mstore //[0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x40 //[64,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x00 //[0,64,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
sha3 //[storage slot for balances[from], 0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
dup1 //[storage slot for balances[from], storage slot for balances[from], 0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
sload //[balances[from],storage slot for balances[from], 0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x01 //[1,balances[from],storage slot for balances[from],0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
swap1 //[balances[from],1,storage slot for balances[from],0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
sub   //[balances[from]-1,storage slot for balances[from],0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
swap1 //[storage slot for balances[from], balances[from]-1,0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
sstore //[0,0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
pop //[0x0000000000000000000000000000000000000000,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
pop //[1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
pop //[owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
toAddressCheckJump //[toAddressCheckJumpPC,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
jump //[owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]

toAddressCheckJump:
TO_ADDRESS_CHECK()
}

#define macro TO_ADDRESS_CHECK() = takes(0) returns(0){

//Input Stack:[owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]

dup3 //[msg.sender,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
dup3 //[0x0000000000000000000000000000000000000000,msg.sender,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
eq //[0,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
iszero //[1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
increaseBalanceJump //[increaseBalanceJumpPC,1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
jumpi //[owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
finishUpdateAndEmitJump //[finishUpdateAndEmitJumpPC,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
jump

increaseBalanceJump:
INCREASE_TO_BALANCE()
finishUpdateAndEmitJump:
FINISH_UPDATE_AND_EMIT()
}


#define macro INCREASE_TO_BALANCE() = takes(0) returns(0){
  //Input Stack: [owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
dup3 //[msg.sender, owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x00 //[0, msg.sender, owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
mstore //[owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x03 //[3,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x20 //[32,3,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
mstore //[owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x40 //[64,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x00 //[0,64,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
sha3 //[storage slot for balances[to], owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
dup1 //[storage slot for balances[to], storage slot for balances[to], owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
sload //[balances[to],storage slot for balances[to], owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x01 //[1,balances[to],storage slot for balances[to],owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
swap1 //[balances[to],1,storage slot for balances[to],owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
add  //[balances[to]+1,storage slot for balances[to],owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
swap1 //[storage slot for balances[to], balances[to]+1,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
sstore //[owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
finishUpdateAndEmitJump //[finishUpdateAndEmitJumpPC,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
jump //[owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]


finishUpdateAndEmitJump:
FINISH_UPDATE_AND_EMIT()

}

#define macro FINISH_UPDATE_AND_EMIT() = takes(0) returns(0){

  //Input Stack: [owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  dup4 //[0,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  0x00 //[0,0,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  mstore //[owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  0x02 //[0x02, owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  0x20 //[32,0x02,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  mstore //[owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  0x40 //[64,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  0x00 //[0,64,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  sha3 //[storage slot for _owners[tokenId], owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  dup4 //[msg.sender, storage slot for _owners[tokenId], owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  swap1 //[storage slot for _owners[tokenId], msg.sender, owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  sstore //[owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  dup4 //[0,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  dup3 //[msg.sender,0,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  dup3 //[owner of token id address,msg.sender,0,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef //[hash of transfer event,owner of token id address,msg.sender,0,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  0x00 //[0,hash of transfer event,owner of token id address,msg.sender,0,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  0xc0 //[192,0,hash of transfer event,owner of token id address,msg.sender,0,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  log4 //[owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  continueMintJump //[continueMintJumpPC,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  jump //[owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]

  continueMintJump:
  CONTINUE_MINT()
}

#define macro CONTINUE_MINT() = takes(0) returns(0){
  //Input Stack: [owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  0x80 //[128,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  mload //[owner of token id address,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  0x0000000000000000000000000000000000000000 //[ 0x0000000000000000000000000000000000000000, owner of token id address,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  eq //[0 or 1, owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  iszero //[0 or 1, owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  revertInvalidSenderJump //[revertInvalidSenderJumpPC, 0 or 1, owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  jumpi //[owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  continueSafeMintJump //[continueSafeMintJumpPC, owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
  jump //[owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]

 revertInvalidSenderJump:
 REVERT_INVALID_SENDER() 
 continueSafeMintJump:
 CHECK_ERC721RECEIVED()
}

#define macro REVERT_INVALID_SENDER() = takes(0) returns(0){

 0x54040729 //[0x54040729,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0] 
 0x00 //[0,0x54040729,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
 dup1 //[0,0,0x54040729,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
 swap2 //[0x54040729,0,0,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
 swap1 //[0,0x54040729,0,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
 mstore //[0,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0] 
 0x04 //[4,0,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
 add //[4,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
 dup1 //[4,4,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x0000000000000000000000000000000000000000 //[0x0000000000000000000000000000000000000000,4,4,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
 swap1 //[4,0x0000000000000000000000000000000000000000,4,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
 mstore //[4,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
 0x20 //[32,4,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
 add //[36,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
 0x00 //[0,36,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
 revert
}

#define macro CHECK_ERC721RECEIVED() = takes(0) returns(0){

//Input Stack: [owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x //[0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
dup5 //[0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
dup5 //[msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x0000000000000000000000000000000000000000 //[0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
dup2 //[msg.sender,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
extcodesize //[code size of caller,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x00 //[0,code size of caller,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
swap1 //[code size of caller, 0,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
gt //[0 or 1,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
trycatchJump //[trycatchJumpPC,0 or 1,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
jumpi //[0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]

trycatchJump:
TRYCATCHBLOCK()

}

#define macro TRYCATCHBLOCK() = takes(0) returns(0){
0x04 //[4,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0xc0 //[192,4,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x150b7a02 //[0x150b7a02,192,4,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0xc0 //[192,0x150b7a02,192,4,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
mstore //[192,4,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
add //[196,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x20 //[32,196,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
caller //[msg.sender,32,196,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0 ]
dup3 //[196,msg.sender,32,196,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
mstore //[32,196,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
add  //[228,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x20 //[32,228,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
dup3 //[0x0000000000000000000000000000000000000000,32,228,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
dup3 //[228,0x0000000000000000000000000000000000000000,32,228,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
mstore //[32,228,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
add  //[260,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x20 //[32,260,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x00 //[0,32,260,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
dup3 //[260,0,32,260,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
mstore //[32,260,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
add //[292,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x20 //[32,292,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x80 //[128,32,292,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
dup3 //[292,128,32,292,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
mstore //[32,292,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
add //[324,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x20 //[32,324,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x00 //[0,32,324,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
dup3 //[324,0,32,324,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
mstore //[32,324,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
add //[356,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x20 //[32,356,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
swap1 //[356,32,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0xa4 //[164,356,32,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0xc0 //[192,164,356,32,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x00 //[0,192,164,356,32,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
dup7 //[msg.sender,0,192,164,356,32,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
gas //[remaining gas,msg.sender,0,192,164,356,32,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
call //[success bool,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
dup1 //[success bool,success bool,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x01 //[1,success bool,success bool,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
eq //[on success 1 no success 0,success bool,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
onSuccessJump //[onSuccessJumpPC,on success 1 no success 0,success bool,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
jumpi //[success bool,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
returndatasize //[100,success bool,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
dup1 //[100,100,success bool,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0xa0 //[160,100,100,success bool,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
mstore //[100,success bool,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x00 //[0,100,success bool,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0xc0 //[192,0,100,success bool,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
returndatacopy //[success bool,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0xa0 //[160,success bool,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
mload //[reason.length,success bool,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x00 //[0,reason.length,success bool,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
eq //[0 or 1 ,success bool,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
invalidreceiverJump //[invalidReceiverJumpPC,0 or 1 ,success bool,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
jumpi //[success bool,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0xa0 //[160,success bool,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
dup1 //[160,160,success bool,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
mload //[returndatasize,160,success bool,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
swap1 //[160, returndatasize,success bool,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x20 //[32,160,returndatasize,success bool,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
add //[192,returndatasize,success bool,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
revert //[success bool,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]



invalidreceiverJump:
REVERTTO()
onSuccessJump:
ON_SUCCESS()
}


#define macro REVERTTO() = takes(0) returns(0){
0x64a0ae9200000000000000000000000000000000000000000000000000000000 //[ERC721InvalidReceiver(address) selector,success bool,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x20 //[0x20,ERC721InvalidReceiver(address) selector, success bool,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
mstore //[success bool,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
dup4 //[msg.sender,success bool,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x24 //[0x24, msg.sender,success bool,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
mstore //[success bool,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x24 //[0x24, success bool,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x20 //[0x20, 0x24, success bool,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
revert
}

#define macro ON_SUCCESS() = takes(0) returns(0){
0x164 //[356,success bool,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
mload //[retval,success bool,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
0x150b7a02 //[onERC721Received selector,retval,success bool,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
eq //[0 or 1,success bool,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
iszero //[0 or 1,success bool,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
revertInvalidReceiverJump //[revertInvalidReceiverPC,0 or 1,success bool,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0]
jumpi //[success bool,0x0000000000000000000000000000000000000000,msg.sender,0,0x,owner of token id address, 0x0000000000000000000000000000000000000000, msg.sender, 0 ]
stop

revertInvalidReceiverJump:
REVERTTO()
}

#define macro _FEEDHORSE() = takes (0) returns (0){
0x00 //[0,function selector from calldata]
dup1 //[0,0,function selector from calldata]
calldataload //[horseId, 0,function selector from calldata]
swap1 //[0, horseId,function selector from calldata]
mstore //[function selector from calldata]
0x0a   //[10,function selector from calldata]
0x20 //[32,10,function selector from calldata]
mstore //[function selector from calldata]
0x40 //[64,function selector from calldata]
0x00 //[0,64,function selector from calldata]
sha3 //[storage slot for horseIdToFedTimeStamp[horseId], function selector from calldata]
timestamp //[block.timestamp,storage slot for horseIdToFedTimeStamp[horseId], function selector from calldata]
swap1 //[storage slot for horseIdToFedTimeStamp[horseId],block.timestamp, function selector from calldata]
sstore //[function selector from calldata]
stop
}


#define macro _ISHAPPYHORSE() = takes (0) returns (0){
0x00 //[0]
dup1 //[0,0]
calldataload //[horseId, 0]
swap1 //[0, horseId]
mstore //[]
0x0a   //[10]
0x20 //[32,10]
mstore //[]
0x40 //[64]
0x00 //[0,64]
sha3 //[storage slot for horseIdToFedTimeStamp[horseId]]
sload //[happyHorseVal]
0x015180 //[86400,happyHorseVal]
timestamp //[block.timestamp,86400,happyHorseVal]
sub //[block.timestamp - 86400,happyHorseVal]
dup1 //[block.timestamp - 86400,block.timestamp - 86400,happyHorseVal]
dup3 //[happyHorseVal,block.timestamp - 86400,block.timestamp - 86400,happyHorseVal]
lt //[0 or 1,block.timestamp - 86400,happyHorseVal]
dup2 //[block.timestamp - 86400,0 or 1,block.timestamp - 86400,happyHorseVal]
dup4 //[happyHorseVal,block.timestamp - 86400,0 or 1,block.timestamp - 86400,happyHorseVal]
eq //[0 or 1, 0 or 1,block.timestamp - 86400,happyHorseVal]
or //[0 or 1,block.timestamp - 86400,happyHorseVal]
returnFalseJump //[returnFalseJumpPC,0 or 1,block.timestamp - 86400,happyHorseVal]
jumpi //[block.timestamp - 86400,happyHorseVal]
0x01 //[1,block.timestamp - 86400,happyHorseVal]
0x00 //[0,1,block.timestamp - 86400,happyHorseVal]
mstore //[block.timestamp - 86400,happyHorseVal]
0x20 //[32,block.timestamp - 86400,happyHorseVal]
0x00 //[0,32,block.timestamp - 86400,happyHorseVal]
return

returnFalseJump:
RETURN_FALSE_JUMP()
}

#define macro RETURN_FALSE_JUMP() = takes (0) returns (0){
0x00 //[0,block.timestamp - 86400,happyHorseVal]
0x00 //[0,0,block.timestamp - 86400,happyHorseVal]
mstore //[block.timestamp - 86400,happyHorseVal]
0x20 //[32,block.timestamp - 86400,happyHorseVal]
0x00 //[0,32,block.timestamp - 86400,happyHorseVal]
return
}



